// Generated by gencpp from file yumi_collision_checking/yumi_executeRequest.msg
// DO NOT EDIT!


#ifndef YUMI_COLLISION_CHECKING_MESSAGE_YUMI_EXECUTEREQUEST_H
#define YUMI_COLLISION_CHECKING_MESSAGE_YUMI_EXECUTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yumi_collision_checking
{
template <class ContainerAllocator>
struct yumi_executeRequest_
{
  typedef yumi_executeRequest_<ContainerAllocator> Type;

  yumi_executeRequest_()
    : command()
    , Qtt_hat()
    , Vt_hat()
    , group_name()
    , t(0)  {
    }
  yumi_executeRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , Qtt_hat(_alloc)
    , Vt_hat(_alloc)
    , group_name(_alloc)
    , t(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Qtt_hat_type;
  _Qtt_hat_type Qtt_hat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Vt_hat_type;
  _Vt_hat_type Vt_hat;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_name_type;
  _group_name_type group_name;

   typedef int64_t _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct yumi_executeRequest_

typedef ::yumi_collision_checking::yumi_executeRequest_<std::allocator<void> > yumi_executeRequest;

typedef boost::shared_ptr< ::yumi_collision_checking::yumi_executeRequest > yumi_executeRequestPtr;
typedef boost::shared_ptr< ::yumi_collision_checking::yumi_executeRequest const> yumi_executeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yumi_collision_checking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4242fadbc2608cbc955e93a81f98d4ba";
  }

  static const char* value(const ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4242fadbc2608cbcULL;
  static const uint64_t static_value2 = 0x955e93a81f98d4baULL;
};

template<class ContainerAllocator>
struct DataType< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yumi_collision_checking/yumi_executeRequest";
  }

  static const char* value(const ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n\
float64[] Qtt_hat\n\
float64[] Vt_hat\n\
string group_name\n\
int64 t\n\
";
  }

  static const char* value(const ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.Qtt_hat);
      stream.next(m.Vt_hat);
      stream.next(m.group_name);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yumi_executeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yumi_collision_checking::yumi_executeRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "Qtt_hat[]" << std::endl;
    for (size_t i = 0; i < v.Qtt_hat.size(); ++i)
    {
      s << indent << "  Qtt_hat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Qtt_hat[i]);
    }
    s << indent << "Vt_hat[]" << std::endl;
    for (size_t i = 0; i < v.Vt_hat.size(); ++i)
    {
      s << indent << "  Vt_hat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Vt_hat[i]);
    }
    s << indent << "group_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group_name);
    s << indent << "t: ";
    Printer<int64_t>::stream(s, indent + "  ", v.t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YUMI_COLLISION_CHECKING_MESSAGE_YUMI_EXECUTEREQUEST_H
