// Generated by gencpp from file inspire_hand/set_forceRequest.msg
// DO NOT EDIT!


#ifndef INSPIRE_HAND_MESSAGE_SET_FORCEREQUEST_H
#define INSPIRE_HAND_MESSAGE_SET_FORCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inspire_hand
{
template <class ContainerAllocator>
struct set_forceRequest_
{
  typedef set_forceRequest_<ContainerAllocator> Type;

  set_forceRequest_()
    : force0(0)
    , force1(0)
    , force2(0)
    , force3(0)
    , force4(0)
    , force5(0)  {
    }
  set_forceRequest_(const ContainerAllocator& _alloc)
    : force0(0)
    , force1(0)
    , force2(0)
    , force3(0)
    , force4(0)
    , force5(0)  {
  (void)_alloc;
    }



   typedef int32_t _force0_type;
  _force0_type force0;

   typedef int32_t _force1_type;
  _force1_type force1;

   typedef int32_t _force2_type;
  _force2_type force2;

   typedef int32_t _force3_type;
  _force3_type force3;

   typedef int32_t _force4_type;
  _force4_type force4;

   typedef int32_t _force5_type;
  _force5_type force5;





  typedef boost::shared_ptr< ::inspire_hand::set_forceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inspire_hand::set_forceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_forceRequest_

typedef ::inspire_hand::set_forceRequest_<std::allocator<void> > set_forceRequest;

typedef boost::shared_ptr< ::inspire_hand::set_forceRequest > set_forceRequestPtr;
typedef boost::shared_ptr< ::inspire_hand::set_forceRequest const> set_forceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inspire_hand::set_forceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inspire_hand::set_forceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inspire_hand

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inspire_hand::set_forceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inspire_hand::set_forceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inspire_hand::set_forceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c8721b68bc7d5e3d85bff9ad38312ed";
  }

  static const char* value(const ::inspire_hand::set_forceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c8721b68bc7d5e3ULL;
  static const uint64_t static_value2 = 0xd85bff9ad38312edULL;
};

template<class ContainerAllocator>
struct DataType< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inspire_hand/set_forceRequest";
  }

  static const char* value(const ::inspire_hand::set_forceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 force0\n\
int32 force1\n\
int32 force2\n\
int32 force3\n\
int32 force4\n\
int32 force5\n\
";
  }

  static const char* value(const ::inspire_hand::set_forceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force0);
      stream.next(m.force1);
      stream.next(m.force2);
      stream.next(m.force3);
      stream.next(m.force4);
      stream.next(m.force5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_forceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inspire_hand::set_forceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inspire_hand::set_forceRequest_<ContainerAllocator>& v)
  {
    s << indent << "force0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force0);
    s << indent << "force1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force1);
    s << indent << "force2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force2);
    s << indent << "force3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force3);
    s << indent << "force4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force4);
    s << indent << "force5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.force5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INSPIRE_HAND_MESSAGE_SET_FORCEREQUEST_H
