// Generated by gencpp from file yumi_robot_service/yumi_executeResponse.msg
// DO NOT EDIT!


#ifndef YUMI_ROBOT_SERVICE_MESSAGE_YUMI_EXECUTERESPONSE_H
#define YUMI_ROBOT_SERVICE_MESSAGE_YUMI_EXECUTERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yumi_robot_service
{
template <class ContainerAllocator>
struct yumi_executeResponse_
{
  typedef yumi_executeResponse_<ContainerAllocator> Type;

  yumi_executeResponse_()
    : xt_hat()
    , Qt_hat()
    , x_next()
    , Q_next()
    , if_collide(0.0)  {
    }
  yumi_executeResponse_(const ContainerAllocator& _alloc)
    : xt_hat(_alloc)
    , Qt_hat(_alloc)
    , x_next(_alloc)
    , Q_next(_alloc)
    , if_collide(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xt_hat_type;
  _xt_hat_type xt_hat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Qt_hat_type;
  _Qt_hat_type Qt_hat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_next_type;
  _x_next_type x_next;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Q_next_type;
  _Q_next_type Q_next;

   typedef double _if_collide_type;
  _if_collide_type if_collide;





  typedef boost::shared_ptr< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct yumi_executeResponse_

typedef ::yumi_robot_service::yumi_executeResponse_<std::allocator<void> > yumi_executeResponse;

typedef boost::shared_ptr< ::yumi_robot_service::yumi_executeResponse > yumi_executeResponsePtr;
typedef boost::shared_ptr< ::yumi_robot_service::yumi_executeResponse const> yumi_executeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yumi_robot_service

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b29584f03c3a6ac720dc8a841448e252";
  }

  static const char* value(const ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb29584f03c3a6ac7ULL;
  static const uint64_t static_value2 = 0x20dc8a841448e252ULL;
};

template<class ContainerAllocator>
struct DataType< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yumi_robot_service/yumi_executeResponse";
  }

  static const char* value(const ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] xt_hat\n\
float64[] Qt_hat\n\
float64[] x_next\n\
float64[] Q_next\n\
float64 if_collide\n\
";
  }

  static const char* value(const ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xt_hat);
      stream.next(m.Qt_hat);
      stream.next(m.x_next);
      stream.next(m.Q_next);
      stream.next(m.if_collide);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yumi_executeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yumi_robot_service::yumi_executeResponse_<ContainerAllocator>& v)
  {
    s << indent << "xt_hat[]" << std::endl;
    for (size_t i = 0; i < v.xt_hat.size(); ++i)
    {
      s << indent << "  xt_hat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xt_hat[i]);
    }
    s << indent << "Qt_hat[]" << std::endl;
    for (size_t i = 0; i < v.Qt_hat.size(); ++i)
    {
      s << indent << "  Qt_hat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Qt_hat[i]);
    }
    s << indent << "x_next[]" << std::endl;
    for (size_t i = 0; i < v.x_next.size(); ++i)
    {
      s << indent << "  x_next[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_next[i]);
    }
    s << indent << "Q_next[]" << std::endl;
    for (size_t i = 0; i < v.Q_next.size(); ++i)
    {
      s << indent << "  Q_next[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Q_next[i]);
    }
    s << indent << "if_collide: ";
    Printer<double>::stream(s, indent + "  ", v.if_collide);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YUMI_ROBOT_SERVICE_MESSAGE_YUMI_EXECUTERESPONSE_H
